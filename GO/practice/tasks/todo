Задача 1: Разработка утилиты для управления конфигурацией через API
Описание:
Создайте утилиту на языке Go, которая будет управлять конфигурацией различных 
сервисов через их API. Утилита должна уметь читать, изменять и 
удалять конфигурационные параметры.

Требования:

Утилита должна принимать параметры конфигурации через файл (JSON, YAML) и/или командную строку.
Должна быть возможность подключения к нескольким сервисам (например, NGINX, Apache, Consul) через их API.
Реализуйте CRUD (Create, Read, Update, Delete) операции для конфигурационных параметров.
Поддержка параллельного выполнения операций для ускорения работы с несколькими сервисами.
Реализуйте логирование действий утилиты (изменения конфигурации, ошибки, успехи).
Добавьте возможность graceful shutdown, чтобы утилита корректно завершала работу по сигналу (например, SIGINT).
Подсказки:

Используйте библиотеки для работы с API (net/http), JSON (encoding/json) и YAML (gopkg.in/yaml.v2).
Для параллелизма используйте горутины и каналы.
Для логирования используйте стандартную библиотеку log или logrus.
Задача 2: Автоматизация развертывания приложения
Описание:
Создайте скрипт на Go, который автоматизирует процесс развертывания приложения на сервере. Скрипт должен уметь клонировать репозиторий, устанавливать зависимости, запускать контейнеры (или сервисы), а также следить за статусом развертывания.

Требования:

Утилита должна принимать конфигурационный файл (JSON, YAML), в котором описаны шаги развертывания.
Реализуйте возможность клонирования репозитория из Git.
Установка зависимостей (например, с использованием go get, npm install, pip install).
Запуск контейнеров (например, с помощью Docker API) или системных сервисов (например, с помощью systemd).
Реализуйте мониторинг и логирование шагов развертывания.
Добавьте возможность отката изменений в случае ошибки.
Реализуйте параллельное выполнение шагов, где это возможно.
Подсказки:

Для работы с Git используйте библиотеки go-git.
Для работы с Docker API используйте библиотеку docker/docker/client.
Для работы с системными сервисами используйте вызовы к системным утилитам (os/exec).
Для параллельного выполнения используйте горутины и каналы.
Реализуйте логику отката, чтобы отменить изменения в случае ошибки.
Эти задачи лучше отражают реальный опыт работы DevOps-инженера с навыками Go, включая автоматизацию, управление конфигурацией и взаимодействие с различными системами через API.